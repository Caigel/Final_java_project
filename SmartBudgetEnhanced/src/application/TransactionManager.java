package application;

import javafx.collections.*; import java.io.*; import java.util.*; import java.util.stream.*;

public class TransactionManager { private final ObservableList<Transaction> data=FXCollections.observableArrayList(); private int nextId=1; private final File csvFile=new File("transactions.csv"); public TransactionManager(){ try{ java.util.List<Transaction> loaded=FileUtils.load(csvFile); data.setAll(loaded); nextId=loaded.stream().mapToInt(Transaction::getId).max().orElse(0)+1; } catch(IOException e){ try{ FileUtils.ensureHeader(csvFile);}catch(IOException ignored){} } } public ObservableList<Transaction> getData(){return data;} public void add(String date,double amount,String category,String description,String type){ data.add(new Transaction(nextId++,date,amount,category,description,type)); } public void delete(Transaction t){ if(t!=null) data.remove(t);} public void save() throws IOException { FileUtils.save(csvFile,data);} public double totalIncome(){ return data.stream().filter(t->"Income".equalsIgnoreCase(t.getType())).mapToDouble(Transaction::getAmount).sum(); } public double totalExpense(){ return data.stream().filter(t->"Expense".equalsIgnoreCase(t.getType())).mapToDouble(Transaction::getAmount).sum(); } public double balance(){ return totalIncome()-totalExpense(); } public Map<String,Double> expenseByCategory(){ return data.stream().filter(t->"Expense".equalsIgnoreCase(t.getType())).collect(Collectors.groupingBy(Transaction::getCategory,Collectors.summingDouble(Transaction::getAmount))); } }