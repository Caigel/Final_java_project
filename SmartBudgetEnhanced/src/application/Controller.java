package application;

import javafx.collections.transformation.FilteredList; import javafx.fxml.*; import javafx.scene.*; import javafx.scene.control.*; import javafx.scene.control.cell.PropertyValueFactory; import javafx.util.StringConverter; import java.io.File; import java.net.URL; import java.time.LocalDate;

public class Controller { @FXML private ToolBar toolbar; @FXML private ToggleButton toggleTheme; @FXML private DatePicker dpDate; @FXML private TextField tfAmount, tfCategory, tfDescription, tfSearch; @FXML private ChoiceBox<String> cbType; @FXML private Button btnAdd, btnDelete, btnSave; @FXML private TableView<Transaction> table; @FXML private TableColumn<Transaction,Integer> colId; @FXML private TableColumn<Transaction,String> colDate, colCategory, colDescription, colType; @FXML private TableColumn<Transaction,Double> colAmount; @FXML private Label lblIncome, lblExpense, lblBalance; private TransactionManager manager; private FilteredList<Transaction> filtered; @FXML public void initialize(){ manager=new TransactionManager(); cbType.getItems().addAll("Income","Expense"); colId.setCellValueFactory(new PropertyValueFactory<>("id")); colDate.setCellValueFactory(new PropertyValueFactory<>("date")); colAmount.setCellValueFactory(new PropertyValueFactory<>("amount")); colCategory.setCellValueFactory(new PropertyValueFactory<>("category")); colDescription.setCellValueFactory(new PropertyValueFactory<>("description")); colType.setCellValueFactory(new PropertyValueFactory<>("type")); filtered=new FilteredList<>(manager.getData(), p->true); table.setItems(filtered); btnAdd.setOnAction(e->add()); btnDelete.setOnAction(e->deleteSelected()); btnSave.setOnAction(e->saveFile()); tfSearch.textProperty().addListener((o,ov,nv)->{ String q=nv==null?"":nv.trim().toLowerCase(); filtered.setPredicate(t-> q.isEmpty() || (t.getCategory()!=null && t.getCategory().toLowerCase().contains(q)) || (t.getDescription()!=null && t.getDescription().toLowerCase().contains(q)) || (t.getType()!=null && t.getType().toLowerCase().contains(q)) || (t.getDate()!=null && t.getDate().toLowerCase().contains(q)) ); }); dpDate.setConverter(new StringConverter<LocalDate>(){ @Override public String toString(LocalDate o){ return o==null?"":o.toString(); } @Override public LocalDate fromString(String s){ return (s==null||s.isBlank())?null:LocalDate.parse(s); } }); dpDate.setValue(LocalDate.now()); toggleTheme.setSelected(Theme.isDark()); toggleTheme.selectedProperty().addListener((o,ov,nv)->{ Theme.setDark(nv); Theme.apply(toolbar.getScene()); }); refreshTotals(); } @FXML private void goHome(){ try{ URL f=new File("resources/home.fxml").toURI().toURL(); Parent page=FXMLLoader.load(f); toolbar.getScene().setRoot(page); Theme.apply(toolbar.getScene()); }catch(Exception e){ e.printStackTrace(); } } private void add(){ StringBuilder err=new StringBuilder(); LocalDate date=dpDate.getValue(); if(date==null) err.append("- Date is required\n"); double amount=0; try{ amount=Double.parseDouble(tfAmount.getText().trim()); }catch(Exception ex){ err.append("- Amount must be a number\n"); } String category=tfCategory.getText().trim(); if(category.isEmpty()) err.append("- Category is required\n"); String type=cbType.getValue(); if(type==null) err.append("- Type is required (Income or Expense)\n"); String description=tfDescription.getText().trim(); if(err.length()>0){ new Alert(Alert.AlertType.ERROR, err.toString(), ButtonType.OK).showAndWait(); return; } if(amount<=0){ new Alert(Alert.AlertType.ERROR, "Amount must be positive.", ButtonType.OK).showAndWait(); return; } manager.add(date.toString(), amount, category, description, type); clearForm(); refreshTotals(); } private void deleteSelected(){ Transaction sel=table.getSelectionModel().getSelectedItem(); if(sel==null){ new Alert(Alert.AlertType.WARNING, "Select a row to delete.", ButtonType.OK).showAndWait(); return; } manager.delete(sel); refreshTotals(); } private void saveFile(){ try{ manager.save(); new Alert(Alert.AlertType.INFORMATION, "Saved to transactions.csv", ButtonType.OK).showAndWait(); }catch(Exception ex){ new Alert(Alert.AlertType.ERROR, "Save failed: "+ex.getMessage(), ButtonType.OK).showAndWait(); } } private void clearForm(){ dpDate.setValue(LocalDate.now()); tfAmount.clear(); tfCategory.clear(); tfDescription.clear(); cbType.setValue(null);} private void refreshTotals(){ lblIncome.setText(String.format("$%.2f", manager.totalIncome())); lblExpense.setText(String.format("$%.2f", manager.totalExpense())); lblBalance.setText(String.format("$%.2f", manager.balance())); } }